#!/bin/bash php
<?php

function line(string $line, ?string $level = null)
{
    echo match ($level) {
        'error' => "\033[31m[x] \033[0m".$line.PHP_EOL,
        'success' => "\033[32m[+] \033[0m".$line.PHP_EOL,
        'warning' => "\033[33m[!] \033[0m".$line.PHP_EOL,
        'info' => "\033[36m[i] \033[0m".$line.PHP_EOL,
        default => $line.PHP_EOL,
    };

}

function info(string $line)
{
    line($line, 'info');
}

function success(string $line)
{
    line($line, 'success');
}

function error(string $line, int $exitCode = 0)
{
    line($line, 'error');
    exit($exitCode);
}

function warning(string $line)
{
    line($line, 'warning');
}

function ask(string $question, string $default = '')
{
    $answer = readline('>>  '.$question.($default ? " ({$default}) : " : ""));

    return !$answer ? $default : $answer;
}

function confirm(string $question, bool $default = true)
{
    $confirmation = ask($question.' ('.($default ? "\033[33mY\033[0m/n" : "y/\033[33mN\033[0m").") : ");


    return match (strtolower($confirmation ?? '')) {
        'y', 'yes', '1' => true,
        'n', 'no', '0' => false,
        default => $default
    };
}

function run(string $command): string
{
    return trim((string) shell_exec($command));
}

$defaultAuthor = run('git config user.name');

function help()
{
    global $defaultAuthor;
    line('Usage: php package <package-name> [options]');
    line('Options:');
    line("  author\tAuthor Name\t\teg: php package <package-name> author=\"{$defaultAuthor}\"");
}

function configurePackage(?string $packageName, array $options = [])
{
    global $defaultAuthor;
    line('Configuring package: '.$packageName);
    $decisions = [
        'karaca' => strpos($packageName, '/') ? explode('/', $packageName)[0] : ask('Vendor name'),
        'deneme' => $packageName,
        'test' => ask('Package description'),
        'Utku Korkmaz' => ask('Package author', $defaultAuthor),
    ];

    $files = glob(__DIR__.'/*');

    foreach ($files as $file) {
        if (is_dir($file)) {
            continue;
        }
        $contents = file_get_contents($file);
        foreach ($decisions as $key => $value) {
            $contents = str_replace($key, $value, $contents);
        }
        file_put_contents($file, $contents);
    }

    if(confirm('Do you want to initialize git repository?')) {
        run('git init');
        run('git add .');
        run('git commit -m "Initial commit"');
    }

    if(confirm('Do you want to install dependencies?')) {
        run('composer install');
    }

    if(confirm('Does the script destroy itself?')) {
        unlink(__FILE__);
    }
}


if (!($packageName = $argv[1] ?? null)) {
    error('Package name must be provided');
}
unset($argv[0], $argv[1]);
$argv = array_values($argv);
parse_str(implode('&', $argv), $options);

switch ($packageName) {
    case 'help':
        help();
        break;
    default:
        configurePackage($packageName, $options);
        break;
}



// tüm dosyaları al
// mevcut dosyada $decisions arrayindeki değerleri çek
// str_replace...

